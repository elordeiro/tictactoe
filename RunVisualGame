#!/usr/bin/env python3
from pygame.locals import *
from enum import Enum
import pygame
import random
import copy
import time
import os

game_state_is = Enum('game_state_is', ['start', 'running', 'over'])
CLEAR = "\033[2J"
RETURN = "\033[H"
BGCOLOR = pygame.Color("#E3CCB2")
LINECOLOR = pygame.Color("#E26274")
SQUARECOLOR = pygame.Color("#F9EC7E")
T_SQUARECOLOR = (178, 201, 227, 5)
WIDTH = 600
HEIGHT = 600
base_path = os.path.dirname(__file__)
cross_path = os.path.join(base_path, "cross.png")
circle_path = os.path.join(base_path, "circle.png")

start_time = time.time()

class Player:
    letter = " "
    def __init__(self, letter):
        self.letter = letter
    
class HumanPlayer(Player):
    def __init__(self, letter):
        super().__init__(letter)
    
    def get_next_move(self, board, userInput):
        valid_moves = board.possible_moves()
        
        if 0 <= userInput < 9 and userInput in valid_moves:
            board.play_position(self.letter, userInput)
            return True
        return False

class AiPlayer(Player):
    oponent = ""

    def __init__(self, letter):
        super().__init__(letter)
        if letter == " X ":
            self.oponent = " O "
        else:
            self.oponent = " X "
    
    def minimax(self, board, depth, maximizingPlayer):
        if board.gameOver():
            if board.get_winner() == " O ":
                return -10
            elif board.get_winner() == " X ":
                return 10
            elif board.get_winner() == "Draw":
                return 0
        
        if maximizingPlayer:
            best_score = -float("inf")
            for move in board.possible_moves():
                board.play_position(" X ", move)
                score = self.minimax(board, (depth + 1), False)
                board.play_position("   ", move)
                best_score = max(best_score, score)
            return best_score
        else:
            best_score = float("inf")
            for move in board.possible_moves():
                board.play_position(" O ", move)
                score = self.minimax(board, (depth + 1), True)
                board.play_position("   ", move)
                best_score = min(best_score, score)
            return best_score

    def get_next_maximizer_move(self, board):
        tempBoard = copy.deepcopy(board)
        best_score = -float("inf")
        best_move = None
        for move in tempBoard.possible_moves():
            tempBoard.play_position(self.letter, move)
            score = self.minimax(tempBoard, 0, False)
            tempBoard.play_position("   ", move)
            if score > best_score:
                best_score = score
                best_move = move
        
        return best_move
    
    def get_next_minimizer_move(self, board):
        tempBoard = copy.deepcopy(board)
        best_score = float("inf")
        best_move = None
        for move in tempBoard.possible_moves():
            tempBoard.play_position(self.letter, move)
            score = self.minimax(tempBoard, 0, True)
            tempBoard.play_position("   ", move)
            if score < best_score:
                best_score = score
                best_move = move
        
        return best_move
    def get_next_move(self, board):
        best_move = -1
        if len(board.possible_moves()) == 9:
            board.play_position(self.letter, random.randrange(0, 9))
            return 
        if self.letter == " X ":
            best_move = self.get_next_maximizer_move(board)
        else:
            best_move = self.get_next_minimizer_move(board)

        board.play_position(self.letter, best_move)
        time.sleep(0.5)
        return 
    
class Board():
    board = []
    winner = ""
    win_line_dir = None
    win_line_pos = None
    
    def __init__(self) -> None:
        self.board = ["   "] * 9

    def printBoard(self):
        for i in range(3):
            for j in range(3):
                if j < 2:
                    print(" " + str(i * 3 + j + 1) + " |", end="")
                else:
                    print(" " + str(i * 3 + j + 1))
            if i < 2:
                print("-----------")
        print("###########")
        for i in range(3):
            for j in range(3):
                if j < 2:
                    print(self.board[i * 3 + j] + "|", end="")
                else:
                    print(self.board[i * 3 + j])
            if i < 2:
                print("-----------")
        

    def possible_moves(self):
        moves = []
        for i, pos in enumerate(self.board):
            if pos == "   ":
                moves.append(i)
        return moves

    def print_winner(self):
        print(CLEAR + RETURN)
        if self.winner == "Draw":
            print(" -----------")
            print(f"|  Draw !!! |")
            print(" -----------\n")
        else:
            print(" -----------")
            print(f"|{self.winner}Wins!!! |")
            print(" -----------\n")

    def gameOver(self):
        rows = [self.board[(i*3):(i*3)+3] for i in range(3)]
        for i, row in enumerate(rows):                                           # Check rows for winner
            if all(spot == row[0] and row[0] != "   " for spot in row):
                self.winner = row[0]
                self.win_line_dir = "row"
                self.win_line_pos = i
                return True

        cols = [[self.board[i] for i in range(j, 9, 3)] for j in range(3)]
        for i, col in enumerate(cols):                                           # Check cols for winner
            if all(spot == col[0] and col[0] != "   " for spot in col):
                self.winner = col[0]
                self.win_line_dir = "col"
                self.win_line_pos = i
                return True

        diag1 = [self.board[i] for i in [0, 4, 8]]
        if all(spot == diag1[0] and diag1[0] != "   " for spot in diag1):       # Check negative diagonal for winner
                self.winner = diag1[0]
                self.win_line_dir = "diag"
                self.win_line_pos = 1
                return True
        
        diag2 = [self.board[i] for i in [2, 4, 6]]
        if all(spot == diag2[0] and diag2[0] != "   " for spot in diag2):       # Check positive diagonal for winner
                self.winner = diag2[0]
                self.win_line_dir = "diag"
                self.win_line_pos = 2
                return True
        
        if not self.possible_moves():
            self.winner = "Draw"
            return True
        
        return False
    def get_board(self):
        return self.board
    
    def get_winner(self):
        return self.winner

    def play_position(self, letter, pos):
        self.board[pos] = letter



class VisualBoard():
    board = None
    player1 = None
    player2 = None
    status = game_state_is.start
    game_over_drawn = False
    turn = 0
    x = 0
    y = 0
    win = None 
    
    def __init__(self) -> None:
        pygame.init()
        pygame.display.set_caption("Tic-Tac-toe")
        self.win = pygame.display.set_mode((WIDTH, HEIGHT))
        return 
    
    def draw_start_menu(self):
        self.win.fill(BGCOLOR)
        font = pygame.font.Font('freesansbold.ttf', 32)
        x, y = pygame.mouse.get_pos()

        
        text = font.render('Tic-Tac-Toe', True, LINECOLOR, None)
        self.win.blit(text, (20, 20))

        text = font.render('Game Modes:', True, LINECOLOR, None)
        self.win.blit(text, (20, 100))
        
        if 20 < x < 300 and 150 < y < 180:
            text = font.render('Human vs Human', True, SQUARECOLOR, None)
            self.win.blit(text, (20, 150))
        else:
            text = font.render('Human vs Human', True, LINECOLOR, None)
            self.win.blit(text, (20, 150))
        
        if 20 < x < 220 and 200 < y < 230:
            text = font.render('Human vs AI', True, SQUARECOLOR, None)
            self.win.blit(text, (20, 200))
        else:
            text = font.render('Human vs AI', True, LINECOLOR, None)
            self.win.blit(text, (20, 200))
        
        if 20 < x < 150 and 250 < y < 280:
            text = font.render('Ai vs Ai', True, SQUARECOLOR, None)
            self.win.blit(text, (20, 250))
        else:
            text = font.render('Ai vs Ai', True, LINECOLOR, None)
            self.win.blit(text, (20, 250))

        if 500 < x < 560 and 525 < y < 555:
            text = font.render('Exit', True, SQUARECOLOR, None)
            self.win.blit(text, (500, 525))
        else:
            text = font.render('Exit', True, LINECOLOR, None)
            self.win.blit(text, (500, 525))
        
        self.update_frame()

    def get_game_mode(self):
        if 20 < self.x < 300 and 150 < self.y < 180:
            return 1
        elif 20 < self.x < 220 and 200 < self.y < 230:
            return 2
        elif 20 < self.x < 150 and 250 < self.y < 280:
            return 3
        elif 500 < self.x < 560 and 525 < self.y < 555:
            return 4
    
    def set_mode(self, mode):
        board = Board()
        if mode == 1:
            player1 = HumanPlayer(" X ")
            player2 = HumanPlayer(" O ")
            return board, player1, player2
        elif mode == 2:
            player1 = HumanPlayer(" X ")
            player2 = AiPlayer(" O ")
            return board, player1, player2
        elif mode == 3:
            player1 = AiPlayer(" X ")
            player2 = AiPlayer(" O ")
            return board, player1, player2
        elif mode == 4:
            pygame.quit()

    def draw_board(self):
        self.win.fill(BGCOLOR)
        cross = pygame.image.load(cross_path)
        cross = pygame.transform.rotozoom(cross, 0, 0.28)
        circle = pygame.image.load(circle_path)
        circle = pygame.transform.rotozoom(circle, 0, 0.1)
        pygame.draw.line(self.win, LINECOLOR, [200, 0], [200, 600], 5)
        pygame.draw.line(self.win, LINECOLOR, [400, 0], [400, 600], 5)
        pygame.draw.line(self.win, LINECOLOR, [0, 200], [600, 200], 5)
        pygame.draw.line(self.win, LINECOLOR, [0, 400], [600, 400], 5)
        
        for i, pos in enumerate(self.board.get_board()):
            row = (i % 3) * 200 + 20
            col = (i // 3) * 200 + 20
            if pos == " X ":
                self.win.blit(cross, (row + 8, col + 8))
            elif pos == " O ":
                self.win.blit(circle, (row + 10, col)) 
            elif row <  self.x < row + 200 and col < self.y < col + 200:
                rect = pygame.Rect(row - 17.5, col - 17.5, 196, 196)
                pygame.draw.rect(self.win, SQUARECOLOR, rect)
        
        self.update_frame()

    def draw_game_over(self):
        x, y = self.x, self.y
        if not self.game_over_drawn:
            self.game_over_drawn = True
            if self.board.win_line_dir == "row":
                win_pos = self.board.win_line_pos * 200 + 100
                for i in range(WIDTH):
                    pygame.draw.line(self.win, 'red', [0, win_pos], [i, win_pos], 5)
                    pygame.display.update()
            elif self.board.win_line_dir == "col":
                win_pos = self.board.win_line_pos * 200 + 100
                for i in range(WIDTH + 1):
                    pygame.draw.line(self.win, 'red', [win_pos, 0], [win_pos, i], 5)
                    pygame.display.update()
            elif self.board.win_line_dir == "diag":
                if self.board.win_line_pos == 1:
                    for i in range(WIDTH + 1):
                        pygame.draw.line(self.win, 'red', [0, 0], [i, i], 5)
                        pygame.display.update()
                else:
                    for i in range(WIDTH + 1):
                        pygame.draw.line(self.win, 'red', [0, 600], [i, 600 - i], 5)
                        pygame.display.update()

        font = pygame.font.Font('freesansbold.ttf', 32)
        rect = pygame.Rect(100, 250, 400, 100)
        border = pygame.Rect(97, 247, 406, 106)
        pygame.draw.rect(self.win, SQUARECOLOR, rect)
        pygame.draw.rect(self.win, LINECOLOR, border, 3, 3)
        
        if self.board.get_winner() == "Draw":
            text = font.render('Draw', True, LINECOLOR, None)
            self.win.blit(text, (260, 255))
        else:
            text = font.render(f'{self.board.get_winner()} Wins!', True, T_SQUARECOLOR, None)
            self.win.blit(text, (220, 255))

        if 120 < x < 240 and 310 < y < 340:
            text = font.render(f'Restart', True, T_SQUARECOLOR, None)
            self.win.blit(text, (120, 310))
        else:
            text = font.render(f'Restart', True, LINECOLOR, None)
            self.win.blit(text, (120, 310))
        
        if 420 < x < 490 and 310 < y < 340:
            text = font.render(f'Quit', True, T_SQUARECOLOR, None)
            self.win.blit(text, (420, 310))
        else:
            text = font.render(f'Quit', True, LINECOLOR, None)
            self.win.blit(text, (420, 310))
        
        self.update_frame()
        
    
    def on_mouse_click(self):
        row = self.x // 200
        col = self.y // 200
        userInput = col * 3 + row
        if self.status == game_state_is.start:
            self.game_over_drawn = False
            mode = self.get_game_mode()
            self.board, self.player1, self.player2 = self.set_mode(mode)
            self.status = game_state_is.running
        elif self.status == game_state_is.running:
            if self.turn % 2 == 0:
                if isinstance(self.player1, HumanPlayer):
                    if self.player1.get_next_move(self.board, userInput):
                        self.turn += 1
                        if self.board.gameOver():
                            self.draw_board()
                            self.draw_game_over()
                            self.status = game_state_is.over
                        else:
                            self.draw_board()
                            if isinstance(self.player2, AiPlayer):
                                self.player2.get_next_move(self.board)
                                self.turn += 1
                                if self.board.gameOver():
                                    self.draw_board()
                                    self.draw_game_over()
                                    self.status = game_state_is.over
                else:
                    self.player1.get_next_move(self.board)
                    self.turn += 1
                    if self.board.gameOver():
                        self.draw_board()
                        self.draw_game_over()
                        self.status = game_state_is.over
            else: 
                if isinstance(self.player2, HumanPlayer):         
                    if self.player2.get_next_move(self.board, userInput):
                        self.turn += 1
                        if self.board.gameOver():
                            self.draw_board()
                            self.draw_game_over()
                            self.status = game_state_is.over
                        else:
                            self.draw_board()
                            if isinstance(self.player1, AiPlayer):
                                self.player1.get_next_move(self.board)
                                self.turn += 1
                                if self.board.gameOver():
                                    self.draw_board()
                                    self.draw_game_over()
                                    self.status = game_state_is.over
                else:
                    self.player2.get_next_move(self.board)
                    self.turn += 1
                    if self.board.gameOver():
                        self.draw_board()
                        self.draw_game_over()
                        self.status = game_state_is.over

        elif self.status == game_state_is.over:
            self.turn = 0
            if 120 < self.x < 240 and 310 < self.y < 340:
                self.status = game_state_is.start
            elif 420 < self.x < 490 and 310 < self.y < 340:
                pygame.quit()
        
        self.update_frame()
    
    def update_frame(self):
        clock = pygame.time.Clock()
        pygame.display.update()
        clock.tick(30)

def main():
    game = VisualBoard()
    running = True
    while running:
        game.x, game.y = pygame.mouse.get_pos()
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            if event.type == pygame.MOUSEBUTTONDOWN:
                game.on_mouse_click()
        if game.status == game_state_is.start:
            game.draw_start_menu()
        elif game.status == game_state_is.running:
            if isinstance(game.player1, AiPlayer) and isinstance(game.player2, AiPlayer):
                game.on_mouse_click()
            game.draw_board()
        elif game.status == game_state_is.over:
            game.draw_game_over()

if __name__=="__main__":
    main()